<?php

namespace RandData;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-04 at 12:27:04.
 */
class TupleTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Tuple
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Tuple;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Tuple::addDatasetFromStr
     * @covers RandData\Tuple::getDataSets
     */
    public function testAddDatasetFromStr() {
        $arr = $this->object->getDataSets();
        $this->assertEmpty($arr);
        $this->assertTrue(is_array($arr));
        $this->assertEquals([], $arr);
        $this->object->addDatasetFromStr("boolean");
        $arr2 = $this->object->getDataSets();
        $this->assertNotEmpty($arr2);
        $this->assertTrue(count($arr2) == 1);
        $this->assertNotEmpty($arr2[0]);
        $this->assertInstanceOf(Set\Boolean::class, $arr2[0]);
    }

    /**
     * @covers RandData\Tuple::addDataset
     * @covers RandData\Tuple::getDataSets
     */
    public function testAddDataset() {
        $arr = $this->object->getDataSets();
        $this->assertEmpty($arr);
        $this->assertTrue(is_array($arr));
        $this->object->addDataset(new Set\Boolean());
        $arr2 = $this->object->getDataSets();
        $this->assertNotEmpty($arr2);
        $this->assertTrue(count($arr2) == 1);
        $this->assertNotEmpty($arr2[0]);
        $this->assertInstanceOf(Set\Boolean::class, $arr2[0]);
    }

    /**
     * @covers RandData\Tuple::get
     */
    public function testGet() 
    {
        $strList = [ "aaa", "bbb", "ccc" ];
        $this->object->addDataset(new Set\Boolean());
        $this->object->addDataset(new Set\Integer(3, 5));
        $this->object->addDataset(new Set\StringList($strList));
        
        $randValArr = $this->object->get();
        $this->assertNotEmpty($randValArr);
        $this->assertNotEmpty($randValArr[0]);
        $this->assertNotEmpty($randValArr[1]);
        $this->assertNotEmpty($randValArr[2]);
        $this->assertTrue(is_array($randValArr));
        $this->assertTrue(count($randValArr) == 3);
        $this->assertTrue($randValArr[0] == "Y" || $randValArr[0] == "N");
        $this->assertTrue(is_integer($randValArr[1]));
        $this->assertTrue($randValArr[1] >= 3 || $randValArr[1] <= 5);
        $this->assertTrue(is_string($randValArr[2]));
        $this->assertRegExp("/^" . implode("|", $strList) . "$/", $randValArr[2]);
    }

}
