<?php

namespace RandData;

class GeneratorImplementation extends Generator
{
    public function getDataSets() 
    {
        return [ "boolean", "integer:min=3;max=8" ];
    }
}

class MyTuple1 extends Tuple {}
class MyTuple2 extends Tuple {}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-04 at 14:53:12.
 */
class GeneratorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Generator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new GeneratorImplementation();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Generator::getTuple
     * @covers RandData\Generator::setTuple
     */
    public function testTuple() {
        $obj = new GeneratorImplementation(new MyTuple1());
        $this->assertInstanceOf(MyTuple1::class, $obj->getTuple());
        $this->assertNotInstanceOf(MyTuple2::class, $obj->getTuple());
        $obj->setTuple(new MyTuple2());
        $this->assertInstanceOf(MyTuple2::class, $obj->getTuple());
        $this->assertNotInstanceOf(MyTuple1::class, $obj->getTuple());
    }

    /**
     * @covers RandData\Generator::getAmount
     * @covers RandData\Generator::setAmount
     */
    public function testSetAmount() {
        $this->assertEquals(10, $this->object->getAmount());
        $val = 5;
        $this->object->setAmount($val);
        $this->assertEquals($val, $this->object->getAmount());
    }

    /**
     * @covers RandData\Generator::run
     */
    public function testRun() {
        $result1 = $this->object->run();
        $this->assertNotEmpty($result1);
        $this->assertTrue(is_array($result1));
        $this->assertCount(10, $result1);
        
        $val = 7;
        $this->object->setAmount($val);
        $result2 = $this->object->run();
        $this->assertNotEmpty($result2);
        $this->assertTrue(is_array($result2));
        $this->assertCount($val, $result2);
        
        foreach ([ $result1, $result2 ] as $result) {
            foreach ($result as $row) {
                $this->assertTrue(is_array($row));
                $this->assertCount(2, $row);
                $this->assertRegExp("/^[NY]$/", $row[0]);
                $this->assertTrue(is_integer($row[1]));
                $this->assertTrue($row[1] >= 3 && $row[1] <= 8);
            }
        }        
    }

}
