<?php

namespace RandData\Set;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-01 at 00:43:21.
 */
class DateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Date
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Date;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Set\Date::getMin
     * @covers RandData\Set\Date::setMin
     */
    public function testGetMin() {
        $dt = new \DateTime();
        $dt->sub(new \DateInterval("P1M"));
        $this->assertEquals($dt->format("U"), $this->object->getMin());
        
        $dt2 = "2017-02-28";
        $this->object->setMin($dt2);
        $this->assertEquals(strtotime($dt2), $this->object->getMin());
    }

    /**
     * @covers RandData\Set\Date::getMax
     * @covers RandData\Set\Date::setMax
     */
    public function testGetMax() {
        $dt = new \DateTime();
        $this->assertEquals($dt->format("U"), $this->object->getMax());
        
        $dt2 = "2017-12-31";
        $this->object->setMax($dt2);
        $this->assertEquals(strtotime($dt2), $this->object->getMax());    
    }

    /**
     * @covers RandData\Set\Date::getFormat
     * @covers RandData\Set\Date::setFormat
     */
    public function testGetFormat() {
        $this->assertEquals("Y-m-d", $this->object->getFormat());
        $val = "d.m.Y";
        $this->object->setFormat($val);
        $this->assertEquals($val, $this->object->getFormat());
    }
    
    /**
     * @covers RandData\Set\Date::get
     * @todo   Implement testGet().
     */
    public function testGet() 
    {
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertNotEmpty($val);
            $this->assertRegExp("/[\d]{4}-[\d]{2}-[\d]{2}/", $val);
        }
        
        $min = "2016-12-23";
        $max = "2016-12-26";
        $values = [
            "2016-12-23",
            "2016-12-24",
            "2016-12-25",
            "2016-12-26"
        ];
        $values2 = [
            "23.12.2016",
            "24.12.2016",
            "25.12.2016",
            "26.12.2016"
        ];
        
        $this->object->setMin($min);
        $this->object->setMax($max);
        
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertTrue(in_array($val, $values));
        }
        
        $this->object->setFormat("d.m.Y");
        
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertTrue(in_array($val, $values2));
        }
    }

    /**
     * @covers RandData\Set\Date::init
     * @todo   Implement testInit().
     */
    public function testInit() {
        $format1 = "m/d/Y";
        $format2 = "d.m.Y";
        $min1 = "2015-12-31";
        $min2 = "2016-03-15";
        $max1 = "2016-08-10";
        $max2 = "2016-10-30";
        
        $params1 = [
            "min" => $min1,
            "max" => $max1,
            "format" => $format1
        ];
        
        $this->object->init($params1);
        $this->assertEquals(strtotime($min1), $this->object->getMin());
        $this->assertEquals(strtotime($max1), $this->object->getMax());
        $this->assertEquals($format1, $this->object->getFormat());
        
        $params2 = [
            "min" => $min2,
            "max" => $max2,
            "format" => $format2
        ];
        
        $this->object->init($params2);
        $this->assertEquals(strtotime($min2), $this->object->getMin());
        $this->assertEquals(strtotime($max2), $this->object->getMax());
        $this->assertEquals($format2, $this->object->getFormat());        
    }
}
