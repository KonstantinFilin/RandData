<?php

namespace RandData\Set;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-05-26 at 15:15:17.
 */
class BooleanTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Boolean
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Boolean;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Set\Boolean::get
     */
    public function testGet() {
        for ($i = 1; $i <= 10; $i++) {
            $this->assertTrue(in_array($this->object->get(), [ "Y", "N" ] ));
        }
    }

    /**
     * @covers RandData\Set\Boolean::__construct
     * @covers RandData\Set\Boolean::getValTrue
     * @covers RandData\Set\Boolean::setValTrue
     * @covers RandData\Set\Boolean::getValFalse
     * @covers RandData\Set\Boolean::setValFalse
     */
    public function testGetValTrue() {
        $val1 = "a";
        $val2 = "b";
        
        $obj = new Boolean($val1, $val2);
        $this->assertEquals($val1, $obj->getValTrue());
        $this->assertEquals($val2, $obj->getValFalse());
        
        $val3 = "c";
        $val4 = "d";
        $obj->setValTrue($val3);
        $obj->setValFalse($val4);
        $this->assertEquals($val3, $obj->getValTrue());
        $this->assertEquals($val4, $obj->getValFalse());
    }

    /**
     * @covers RandData\Set\Boolean::init
     */
    public function testInit() 
    {
        $val1 = "a";
        $val2 = "b";
        
        $obj = new Boolean($val1, $val2);
        $this->assertEquals($val1, $obj->getValTrue());
        $this->assertEquals($val2, $obj->getValFalse());
        
        $val3 = "c";
        $val4 = "d";
        
        $params = [
            "valTrue" => $val3,
            "valFalse" => $val4
        ];        

        $obj->init($params);
        $this->assertEquals($val3, $obj->getValTrue());
        $this->assertEquals($val4, $obj->getValFalse());
    }
}
