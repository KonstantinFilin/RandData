<?php

namespace RandData\Set;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-05-25 at 11:01:53.
 */
class IntegerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Integer
     */
    protected $object;
    protected $param1;
    protected $param2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->param1 = 11;
        $this->param2 = 123;
        $this->object = new Integer($this->param1, $this->param2);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Set\Integer::getMin
     * @covers RandData\Set\Integer::setMin
     */
    public function testGetMin() {
        $this->assertEquals($this->param1, $this->object->getMin());
        
        $obj2 = new Integer();
        $this->assertEquals(0, $obj2->getMin());
        
        $value2 = 5;
        $obj2->setMin($value2);
        $this->assertEquals($value2, $obj2->getMin());
    }

    /**
     * @covers RandData\Set\Integer::getMax
     * @covers RandData\Set\Integer::setMax
     */
    public function testGetMax() {
        $this->assertEquals($this->param1, $this->object->getMin());
        
        $obj2 = new Integer();
        $this->assertEquals(0, $obj2->getMin());
        
        $value2 = 5;
        $obj2->setMin($value2);
        $this->assertEquals($value2, $obj2->getMin());
    }

    /**
     * @covers RandData\Set\Integer::get
     */
    public function testGet() {
        $min = 7;
        $max = 21;
        $hasMin = false;        
        $hasMax = false;        
        
        $obj = new Integer($min, $max);
        
        for ($i = 1; $i <= 100; $i++) {
            $randValue = $obj->get();
            
            if ($randValue == $min) {
                $hasMin = true;
            }
            
            if ($randValue == $max) {
                $hasMax = true;
            }
            
            $this->assertTrue(is_integer($randValue));
            $this->assertLessThanOrEqual($max, $randValue);
            $this->assertGreaterThanOrEqual($min, $randValue);
        }
        
        $this->assertTrue($hasMin);
        $this->assertTrue($hasMax);
    }

    /**
     * @covers RandData\Set\Integer::init
     */
    public function testCreateInit() 
    {
        $paramMin = 33;
        $paramMax = 55;
        
        $this->assertFalse($this->object->getMin() == $paramMin);
        $this->assertFalse($this->object->getMax() == $paramMax);
        
        $params = [ 
            "min" => $paramMin,
            "max" => $paramMax
        ];
        
        $this->object->init($params);
        
        $this->assertTrue($this->object->getMin() == $paramMin);
        $this->assertTrue($this->object->getMax() == $paramMax);
    }

}
