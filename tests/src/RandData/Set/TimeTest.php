<?php

namespace RandData\Set;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-05-31 at 10:20:35.
 */
class TimeTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Time
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Time;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Set\Time::getMin
     * @covers RandData\Set\Time::setMin
     */
    public function testGetMin() {
        $this->assertEquals("00:00", $this->object->getMin());
        $min = 351;
        $this->object->setMin($min);
        $this->assertEquals("05:51", $this->object->getMin());
        
        $min2 = 123;
        $obj2 = new Time($min2);
        $this->assertEquals("02:03", $obj2->getMin());
        $min3 = 456;
        $obj2->setMin($min3);
        $this->assertEquals("07:36", $obj2->getMin());
        $min4 = "07:41";
        $obj2->setMin($min4);
        $this->assertEquals($min4, $obj2->getMin());
    }

    /**
     * @covers RandData\Set\Time::getMax
     * @covers RandData\Set\Time::setMax
     */
    public function testGetMax() {
        $this->assertEquals("23:59", $this->object->getMax());
        $max = 211;
        $this->object->setMax($max);
        $this->assertEquals("03:31", $this->object->getMax());
        
        $max2 = 321;
        $obj2 = new Time(1, $max2);
        $this->assertEquals("05:21", $obj2->getMax());
        $max3 = 654;
        $obj2->setMax($max3);
        $this->assertEquals("10:54", $obj2->getMax());
        $max4 = "10:55";
        $obj2->setMax($max4);
        $this->assertEquals($max4, $obj2->getMax());
    }

    /**
     * @covers RandData\Set\Time::hasSeconds
     * @covers RandData\Set\Time::hasSeconds
     */
    public function testSeconds()
    {
        $this->assertFalse($this->object->hasSeconds());
        $this->object->setSeconds(true);
        $this->assertTrue($this->object->hasSeconds());
    }
    
    /**
     * @covers RandData\Set\Time::get
     * @todo   Implement testGet().
     */
    public function testGet() 
    {
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertNotEmpty($val);
            $this->assertRegExp("/^[0-9]{2}:[0-9]{2}$/", $val);
            $this->assertTrue(strlen($val) == 5);
        }
        
        $this->object->setSeconds(true);
        
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertNotEmpty($val);
            $this->assertRegExp("/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/", $val);
            $this->assertTrue(strlen($val) == 8);
        }
        
        $this->object->setSeconds(false);
        $this->object->setMin("18:17");
        $this->object->setMax("18:21");
        
        $possibleArr = [ 
            "18:17", 
            "18:18", 
            "18:19", 
            "18:20", 
            "18:21" 
        ];
        
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertNotEmpty($val);
            $this->assertTrue(in_array($val, $possibleArr));
        }
    }

    /**
     * @covers RandData\Set\Time::init
     * @todo   Implement testInit().
     */
    public function testInit() {
        $min1 = "4";
        $min2 = "17";
        $max1 = "29";
        $max2 = "59";
        $seconds1 = true;
        $seconds2 = false;

        $params1 = [
            "min" => $min1,
            "max" => $max1,
            "seconds" => $seconds1
        ];

        $params2 = [
            "min" => $min2,
            "max" => $max2,
            "seconds" => $seconds2
        ];
        
        $this->object->init($params1);
        $this->assertEquals("00:04", $this->object->getMin());
        $this->assertEquals("00:29", $this->object->getMax());
        $this->assertEquals($seconds1, $this->object->hasSeconds());
        $this->object->init($params2);
        $this->assertEquals("00:17", $this->object->getMin());
        $this->assertEquals("00:59", $this->object->getMax());
        $this->assertEquals($seconds2, $this->object->hasSeconds());
    }

    /**
     * @covers RandData\Set\Time::fromMin
     * @dataProvider toMinProvider
     */
    public function testFromMin($input, $expected) {
        $this->assertEquals($expected, $this->object->fromMin($input));
    }

    /**
     * @covers RandData\Set\Time::toMin
     * @dataProvider toMinProvider
     */
    public function testToMin($expected, $input) {
        $this->assertEquals($expected, $this->object->toMin($input));
    }
    
    public function toMinProvider()
    {
        return [
            [ 0, "00:00" ],
            [ 5, "00:05" ],
            [ 15, "00:15" ],
            [ 60, "01:00" ],
            [ 72, "01:12" ],
            [ 323, "05:23" ],
            [ 1017, "16:57" ],
            [ 1439, "23:59" ],
        ];
    }
}
