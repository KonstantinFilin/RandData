<?php

namespace RandData\Set\en_GB;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-10 at 21:55:23.
 */
class CityTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var City
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new City;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Set\en_GB\City::parseDistrict
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Doesn't exist: aa
     */
    public function testParseDistrictException() {
        $obj = new City();
        $obj->parseDistrict("aa");
    }

    /**
     * @covers RandData\Set\en_GB\City::__construct
     * @covers RandData\Set\en_GB\City::get
     * @covers RandData\Set\en_GB\City::getCityList
     * @covers RandData\Set\en_GB\City::loadCityList
     * @covers RandData\Set\en_GB\City::setPostcode
     * @covers RandData\Set\en_GB\City::parseDistrict
     * @covers RandData\Set\en_GB\City::getCityList
     */
    public function testGet() {
        $pattern = "/^" . City::VALIDATE_PATTERN . "$/";
        
        for ($i = 1; $i <= 10; $i++) {
            $value = $this->object->get();
            $this->assertNotEmpty($value);
            $this->assertRegExp($pattern, $value);
        }
        
        $obj = new City();
        $obj->setPostcode("CR");
        $value2 = $obj->get();
        $this->assertNotEmpty($value2);
        $this->assertRegExp($pattern, $value2);
    }

    /**
     * @covers RandData\Set\en_GB\City::getCityList
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage No delim at line
     */
    public function testGetCityListException()
    {
        $obj = new City();
        $obj->getCityList([ "line1", "line2", "line3" ]);
    }
    
    /**
     * @covers RandData\Set\en_GB\City::getCityList
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage City list must be an array
     */
    public function testGetCityListException2()
    {
        $obj = new City();
        $obj->getCityList(2);
    }
    
    /**
     * @covers RandData\Set\en_GB\City::getCityList
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage City list must not be empty
     */
    public function testGetCityListException3()
    {
        $obj = new City();
        $obj->getCityList([]);
    }
    
    /**
     * @covers RandData\Set\en_GB\City::getCityList
     */
    public function testGetCityList()
    {
        $obj = new City();
        $res = $obj->getCityList([ "aaa; abc", "", "ddd;def", "", "ggg;ghi" ]);
        $this->assertEquals([ "aaa" => "abc", "ddd" => "def", "ggg" => "ghi" ], $res);
    }
    
    /**
     * @covers RandData\Set\en_GB\City::init
     */
    public function testInit() {
        $pattern = "/^(Harrogate|Knaresborough|Ripon)$/";
        $this->object->init([ "postcode" => "HG" ]);
        
        for ($i = 1; $i <= 10; $i++) {
            $value = $this->object->get();
            $this->assertNotEmpty($value);
            $this->assertRegExp($pattern, $value);
        }
    }
}
