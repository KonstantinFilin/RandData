<?php

namespace RandData\Set;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-01 at 13:54:07.
 */
class DatetimeTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Datetime
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Datetime;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Set\Datetime::getD
     * @covers RandData\Set\Datetime::setD
     */
    public function testGetD() {
        $objDef = $this->object->getD();
        $obj1 = new Date("2019-12-31");
        $this->object->setD($obj1);
        $this->assertNotEquals($objDef, $this->object->getD());
        $this->assertEquals($obj1, $this->object->getD());
    }

    /**
     * @covers RandData\Set\Datetime::getT
     * @covers RandData\Set\Datetime::setT
     */
    public function testGetT() {
        $objDef = $this->object->getT();
        $obj1 = new Time();
        $this->object->setT($obj1);
        $this->assertNotEquals($objDef, $this->object->getT());
        $this->assertEquals($obj1, $this->object->getT());        
    }

    /**
     * @covers RandData\Set\Datetime::get
     * @covers RandData\Set\Datetime::setDateFormat
     */
    public function testGet() {
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertNotEmpty($val);
            $this->assertRegExp("/^[\d]{4}-[\d]{2}-[\d]{2} [\d]{2}:[\d]{2}:[\d]{2}$/", $val);
        }

        $this->object->setDateFormat("d.m.Y");
        for ($i = 1; $i <= 10; $i++) {
            $val = $this->object->get();
            $this->assertNotEmpty($val);
            $this->assertRegExp("/^[\d]{2}.[\d]{2}.[\d]{4} [\d]{2}:[\d]{2}:[\d]{2}$/", $val);
        }
    }

    /**
     * @covers RandData\Set\Datetime::init
     */
    public function testInit() {
        $minT1 = "09:00";
        $minT2 = "10:00";
        $maxT1 = "18:00";
        $maxT2 = "19:30";
        $seconds1 = true;
        $seconds2 = false;
        
        $minD1 = "2017-01-31";
        $maxD1 = "2017-08-15";
        $minD2 = "2017-02-15";
        $maxD2 = "2017-07-20";
        
        $format1 = "m/d/Y";
        $format2 = "d.m.Y";
        
        $params1 = [
            "time_min" => $minT1,
            "time_max" => $maxT1,
            "date_min" => $minD1,
            "date_max" => $maxD1,
            "date_format" => $format1,
            "seconds" => $seconds1
        ];
        
        $params2 = [
            "time_min" => $minT2,
            "time_max" => $maxT2,
            "date_min" => $minD2,
            "date_max" => $maxD2,
            "date_format" => $format2,
            "seconds" => $seconds2
        ];

        $this->object->init($params1);
        $this->assertEquals($seconds1, $this->object->getT()->hasSeconds());
        $this->assertEquals($minT1, $this->object->getT()->getMin());
        $this->assertEquals($maxT1, $this->object->getT()->getMax());
        $this->assertEquals($format1, $this->object->getD()->getFormat());
        $this->assertEquals(strtotime($minD1), $this->object->getD()->getMin());
        $this->assertEquals(strtotime($maxD1), $this->object->getD()->getMax());

        $this->object->init($params2);
        $this->assertEquals($seconds2, $this->object->getT()->hasSeconds());
        $this->assertEquals($minT2, $this->object->getT()->getMin());
        $this->assertEquals($maxT2, $this->object->getT()->getMax());
        $this->assertEquals($format2, $this->object->getD()->getFormat());
        $this->assertEquals(strtotime($minD2), $this->object->getD()->getMin());
        $this->assertEquals(strtotime($maxD2), $this->object->getD()->getMax());
    }
}
