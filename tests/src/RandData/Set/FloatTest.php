<?php
namespace RandData\Set;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-05-26 at 00:42:53.
 */
class FloatTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Decimal
     */
    protected $object;
    protected $param1;
    protected $param2;
    protected $paramFr1;
    protected $paramFr2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->param1 = 11;
        $this->param2 = 123;
        $this->paramFr1 = 4;
        $this->paramFr2 = 9;

        $this->object = new Decimal($this->param1, $this->param2);
        $this->object->setMinFractionDigits($this->paramFr1);
        $this->object->setMaxFractionDigits($this->paramFr2);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers RandData\Set\Float::getMin
     * @covers RandData\Set\Float::setMin
     */
    public function testGet()
    {
        $this->assertEquals($this->param1, $this->object->getMin());
        
        $obj2 = new Decimal();
        $this->assertEquals(0, $obj2->getMin());
        
        $value2 = 5;
        $obj2->setMin($value2);
        $this->assertEquals($value2, $obj2->getMin());
    }

    /**
     * @covers RandData\Set\Float::getMinFractionDigits
     * @covers RandData\Set\Float::setMinFractionDigits
     */
    public function testGetMinFractionDigits()
    {
        $this->assertEquals($this->paramFr1, $this->object->getMinFractionDigits());
        
        $obj2 = new Decimal();
        $this->assertEquals(0, $obj2->getMinFractionDigits());
        
        $value2 = 5;
        $obj2->setMinFractionDigits($value2);
        $this->assertEquals($value2, $obj2->getMinFractionDigits());
    }

    /**
     * @covers RandData\Set\Float::getMaxFractionDigits
     * @covers RandData\Set\Float::setMaxFractionDigits
     */
    public function testGetMaxFractionDigits()
    {
        $this->assertEquals($this->paramFr2, $this->object->getMaxFractionDigits());
        
        $obj2 = new Decimal();
        $this->assertEquals(Decimal::FRACTION_MAX, $obj2->getMaxFractionDigits());
        
        $value2 = 5;
        $obj2->setMaxFractionDigits($value2);
        $this->assertEquals($value2, $obj2->getMaxFractionDigits());
    }

    /**
     * @covers RandData\Set\Float::init
     * @todo   Implement testInit().
     */
    public function testInit()
    {
        $paramMin = 8;
        $paramMax = 11;
        
        $this->assertFalse($this->object->getMinFractionDigits() == $paramMin);
        $this->assertFalse($this->object->getMaxFractionDigits() == $paramMax);
        
        $params = [ 
            "minFractionDigits" => $paramMin,
            "maxFractionDigits" => $paramMax
        ];
        
        $this->object->init($params);
        
        $this->assertTrue($this->object->getMinFractionDigits() == $paramMin);
        $this->assertTrue($this->object->getMaxFractionDigits() == $paramMax);
    }
}
