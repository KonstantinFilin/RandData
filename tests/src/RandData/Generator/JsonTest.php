<?php

namespace RandData\Generator;

class JsonImplementation extends Json
{
    public function getDataSets() 
    {
        return [
            "Sex" => new \RandData\Set\Boolean("m", "f"),
            "Level" => new \RandData\Set\Integer(6, 9),
            "Exit" => new \RandData\Set\StringList([ "ddd", "eee", "fff", "ggg" ])
        ];
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-05 at 14:47:40.
 */
class JsonTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Json
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new JsonImplementation;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Generator\Json::run
     */
    public function testRun() {
        $amount = 5;
        $this->object->setAmount($amount);
        $dataStr = $this->object->run();
        $dataArr = json_decode($dataStr, true);
        $this->assertNotEmpty($dataArr);
        $this->assertCount($amount, $dataArr);
        
        foreach ($dataArr as $item) {
            $this->assertArrayHasKey("Sex", $item);
            $this->assertArrayHasKey("Level", $item);
            $this->assertArrayHasKey("Exit", $item);
            
            $this->assertNotEmpty($item["Sex"]);
            $this->assertNotEmpty($item["Level"]);
            $this->assertNotEmpty($item["Exit"]);
            
            $level = intval($item["Level"]);
            
            $this->assertRegExp("/^[mf]$/", $item["Sex"]);
            $this->assertLessThanOrEqual(9, $level);
            $this->assertGreaterThanOrEqual(6, $level);
            $this->assertRegExp("/^(ddd)|(eee)|(fff)|(ggg)$/", $item["Exit"]);
        }
    }

}
