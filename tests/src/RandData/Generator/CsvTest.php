<?php

namespace RandData\Generator;

class CsvWithoutHeaders extends Csv
{
    public function getDataSets() 
    {
        return [
            new \RandData\Set\Boolean(),
            new \RandData\Set\Integer(3, 5),
            new \RandData\Set\StringList([ "aaa", "bbb", "ccc" ])
        ];
    }
}

class CsvWithHeaders extends Csv
{
    public function getDataSets() 
    {
        return [
            "Sex" => new \RandData\Set\Boolean("m", "f"),
            "Level" => new \RandData\Set\Integer(6, 9),
            "Exit" => new \RandData\Set\StringList([ "ddd", "eee", "fff", "ggg" ])
        ];
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-04 at 13:03:57.
 */
class CsvTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Csv
     */
    protected $object1;
    /**
     * @var Csv
     */
    protected $object2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object1 = new CsvWithoutHeaders();
        $this->object2 = new CsvWithHeaders();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Generator\Csv::run
     * @covers RandData\Generator\Csv::setColumnDelim
     */
    public function testRun() 
    {
        $column = ";";
        $res1 = "[YN]" . $column . "[345]" . $column . "(aaa)|(bbb)|(ccc)";
        $resArr1 = [ $res1, $res1, $res1 ];
        $this->object1->setAmount(3);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr1) . "/m", implode(PHP_EOL, $this->object1->run()));

        $column2 = ";";
        $res2 = "[YN]" . $column . "[345]" . $column . "(aaa)|(bbb)|(ccc)";
        $resArr2 = [ $res2, $res2, $res2, $res2, $res2 ];
        $this->object1->setAmount(5);
        $this->object1->setColumnDelim($column2);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr2) . "/m", implode(PHP_EOL, $this->object1->run()));

        $res3 = "[mf]" . $column . "[679]" . $column . "(fff)|(ggg)|(hhh)";
        $resArr3 = [ "Sex;Level:Exit", $res3, $res3, $res3, $res3 ];
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr3) . "/m", implode(PHP_EOL, $this->object2->run()));
    }
}
