<?php

namespace RandData\Generator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-04 at 13:03:57.
 */
class CsvTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \RandData\Formatter\Csv
     */
    protected $formatter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->formatter = new \RandData\Formatter\Csv();
        $this->formatter->setHeaders([ "f1", "f2", "f3", "f4" ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Formatter\Csv::build
     * @covers RandData\Formatter\Csv::buildOne
     * @covers RandData\Formatter\Csv::setShowCounter
     */
    public function testShowCounter() 
    {
        $columnDelim = ";";
        $data1 = [ "aaa", "bbb", "ccc", "ddd" ];
        $data2 = [ "ee", "ff", "gg", "hh" ];
        $data = [ 
            implode($columnDelim, $data1), 
            implode($columnDelim, $data2)
        ];

        $counter = 3;
        
        $expected1 = $counter . $columnDelim . implode($columnDelim, $data1);
        $this->assertEquals($expected1, $this->formatter->buildOne($counter, $data1));
        $expected2 = "#;f1;f2;f3;f4" . PHP_EOL . implode($columnDelim, $data1) . PHP_EOL . implode($columnDelim, $data2);
        $this->assertEquals($expected2, $this->formatter->build($data));
        
        $this->formatter->setShowCounter(false);
        $expected3 = implode($columnDelim, $data1);
        $this->assertEquals($expected3, $this->formatter->buildOne($counter, $data1));
        $expected4 = "f1;f2;f3;f4" . PHP_EOL . implode($columnDelim, $data1) . PHP_EOL . implode($columnDelim, $data2);
        $this->assertEquals($expected4, $this->formatter->build($data));
    }

    /**
     * @covers RandData\Formatter\Csv::build
     * @covers RandData\Formatter\Csv::setShowHeaders
     */
    public function testShowHeaders() 
    {
        $columnDelim = ";";
        $data1 = [ "aaa", "bbb", "ccc", "ddd" ];
        $data2 = [ "ee", "ff", "gg", "hh" ];
        $data = [ 
            implode($columnDelim, $data1),
            implode($columnDelim, $data2)
        ];
        
        $expected1 = "#;f1;f2;f3;f4" . PHP_EOL . implode($columnDelim, $data1) . PHP_EOL . implode($columnDelim, $data2);
        $this->assertEquals($expected1, $this->formatter->build($data));
        
        $this->formatter->setShowHeaders(false);
        
        $expected2 = implode($columnDelim, $data1) . PHP_EOL . implode($columnDelim, $data2);
        $this->assertEquals($expected2, $this->formatter->build($data));
    }

    /**
     * @covers RandData\Formatter\Csv::build
     * @covers RandData\Formatter\Csv::setColumnDelim
     * @covers RandData\Formatter\Csv::setLineDelim
     */
    public function testSetColumnDelim() 
    {
        $columnDelim = ";";
        $columnDelim2 = ":";
        $lineDelim = "**";
        
        $data1 = [ "aaa", "bbb", "ccc", "ddd" ];
        $data2 = [ "ee", "ff", "gg", "hh" ];
        $data = [ 
            implode($columnDelim, $data1), 
            implode($columnDelim, $data2) 
        ];
        
        $dataD2 = [ 
            implode($columnDelim2, $data1), 
            implode($columnDelim2, $data2) 
        ];

        $expected1 = "#;f1;f2;f3;f4" . PHP_EOL . implode($columnDelim, $data1) . PHP_EOL . implode($columnDelim, $data2);
        $this->assertEquals($expected1, $this->formatter->build($data));
        
        $this->formatter->setColumnDelim($columnDelim2);
        $this->formatter->setLineDelim($lineDelim);
        
        $expected2 = "#:f1:f2:f3:f4" . $lineDelim . implode($columnDelim2, $data1) . $lineDelim . implode($columnDelim2, $data2);
        $this->assertEquals($expected2, $this->formatter->build($dataD2));
    }
}
