<?php

namespace RandData\Generator;

class PersonGenerator extends \RandData\Generator
{
    public function getDataSets() {
        return [
            "Name" => "ru_person",
            "Birth" => "date:min=1900-01-01;max=2005-12-31",
            "Phone" => "phone:country_list=7;region_list=495,499,915,919,905,903",
            "Sum" => "integer:min=100;max=10000",
            "Class" => "string_list:values=aaa,bbb,ccc;possibility=50,20,30"
        ];
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-04 at 13:03:57.
 */
class CsvTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \RandData\Formatter\Csv
     */
    protected $formatter;

    /**
     *
     * @var \RandData\Generator\PersonGenerator
     */
    protected $generator;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->formatter = new \RandData\Formatter\Csv();
        $this->generator = new PersonGenerator($this->formatter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Generator\Csv::run
     * @covers RandData\Generator\Csv::setShowCounter
     */
    public function testShowCounter() 
    {
        $column1 = ";";
        $res1 = "[0-9]+" . $column1 . "[YN]" . $column1 . "[345]" . $column1 . "(aaa)|(bbb)|(ccc)";
        $headers = [ "Name", "Birth", "Phone", "Sum", "Class" ];
        $resArr1 = [ implode($column1, [ "#" ] + $headers), $res1, $res1, $res1 ];
        $this->generator->setAmount(3);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr1) . "/m", implode(PHP_EOL, $this->generator->run()));
        $this->generator->setAmount(3);
        $column2 = ";";
        $this->formatter->setShowCounter(false);
        $res2 = "[YN]" . $column2 . "[345]" . $column2 . "(aaa)|(bbb)|(ccc)";
        $headers2 = [ "Name", "Birth", "Phone", "Sum", "Class" ];
        $resArr2 = [ implode($column2, $headers2), $res2, $res2, $res2 ];
        $this->generator->setAmount(3);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr2) . "/m", implode(PHP_EOL, $this->generator->run()));
    }

    /**
     * @covers RandData\Generator\Csv::run
     * @covers RandData\Generator\Csv::setShowHeaders
     */
    public function testShowHeaders() 
    {
        $column1 = ";";
        $res1 = "[0-9]+" . $column1 . "[YN]" . $column1 . "[345]" . $column1 . "(aaa)|(bbb)|(ccc)";
        $headers = [ "Name", "Birth", "Phone", "Sum", "Class" ];
        $resArr1 = [ implode($column1, [ "#" ] + $headers), $res1, $res1, $res1 ];
        $this->generator->setAmount(3);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr1) . "/m", implode(PHP_EOL, $this->generator->run()));
        $column2 = ";";
        $this->formatter->setHeaders(false);
        $res2 = "[YN]" . $column2 . "[345]" . $column2 . "(aaa)|(bbb)|(ccc)";
        $resArr2 = [ $res2, $res2, $res2 ];
        $this->generator->setAmount(3);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr2) . "/m", implode(PHP_EOL, $this->generator->run()));
    }

    /**
     * @covers RandData\Generator\Csv::run
     * @covers RandData\Generator\Csv::setColumnDelim
     */
    public function testRun() 
    {
        $column1 = ";";
        $res1 = "[0-9]+" . $column1 . "[YN]" . $column1 . "[345]" . $column1 . "(aaa)|(bbb)|(ccc)";
        $headers = [ "Name", "Birth", "Phone", "Sum", "Class" ];
        $resArr1 = [ implode($column1, [ "#" ] + $headers), $res1, $res1, $res1 ];
        $this->generator->setAmount(3);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr1) . "/m", implode(PHP_EOL, $this->generator->run()));
        
        $column2 = ":";
        $res1 = "[0-9]+" . $column2 . "[YN]" . $column2 . "[345]" . $column2 . "(aaa)|(bbb)|(ccc)";
        $headers2 = [ "Name", "Birth", "Phone", "Sum", "Class" ];
        $resArr2 = [ implode($column2, [ "#" ] + $headers2), $res1, $res1, $res1 ];
        $this->generator->setAmount(3);
        $this->assertRegExp("/" . implode(PHP_EOL, $resArr2) . "/m", implode(PHP_EOL, $this->generator->run()));
    }
}
