<?php

namespace RandData\Formatter;

class TupleImplementationJson extends \RandData\Tuple
{
    public function getDataSets() {
        return [
            "f1" => "integer:min=1;max=100",
            "f2" => "integer:min=1;max=100",
            "f3" => "integer:min=1;max=100",
            "f4" => "integer:min=1;max=100"
        ];
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-05 at 14:47:40.
 */
class JsonTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \RandData\Formatter\Json
     */
    protected $formatter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->formatter = new \RandData\Formatter\Json(new \RandData\Generator(new TupleImplementationJson()));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Formatter\Json::build
     */
    public function testBuild() {
        $headers = [ "f1", "f2", "f3", "f4" ];
        $data1 = [ "f1" => "aaa", "f2" => "bbb", "f3" => "ccc", "f4" => "ddd" ];
        $data2 = [ "f1" => "ee", "f2" => "ff", "f3" => "gg", "f4" => "hh" ];
        $data = [ 
            $data1, 
            $data2 
        ];

        $generator = $this->createMock(\RandData\Generator::class);
        $generator->method("run")->willReturn($data);
        $formatter = new \RandData\Formatter\Json($generator);
        
        $this->assertEquals(json_encode($data, JSON_PRETTY_PRINT), $formatter->build());        
    }
}
