<?php

namespace RandData\Formatter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-13 at 21:20:10.
 */
class SqlTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Sql
     */
    protected $formatter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->formatter = new Sql("table1");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RandData\Formatter\Sql::build
     */
    public function testBuild() {
        $data = [ "sql1", "sql2", "sql3" ];
        $this->assertEquals(implode(";". PHP_EOL, $data), $this->formatter->build($data));
    }

    /**
     * @covers RandData\Formatter\Sql::buildOne
     * @todo   Implement testBuildOne().
     */
    public function testBuildOne() {

    }

    /**
     * @covers RandData\Formatter\Sql::setIncrementField
     * @covers RandData\Formatter\Sql::setIncrementStart
     * @covers RandData\Formatter\Sql::buildOne
     */
    public function testSetIncrementField() {
        $headers = [ "fld1", "fld2", "fld3", "fld4" ];
        $data = [ "val1", "val2", null, "val4" ];

        $this->formatter->setHeaders($headers);
        $expected = "INSERT INTO `table1` (fld1,fld2,fld3,fld4) VALUES ('val1','val2',NULL,'val4')";
        $this->assertEquals($expected, $this->formatter->buildOne(4, $data));
        
        $this->formatter->setIncrementField("id");
        $expected2 = "INSERT INTO `table1` (id,fld1,fld2,fld3,fld4) VALUES (4,'val1','val2',NULL,'val4')";
        $this->assertEquals($expected2, $this->formatter->buildOne(4, $data));
        
        $this->formatter->setIncrementStart(7);
        $expected3 = "INSERT INTO `table1` (id,fld1,fld2,fld3,fld4) VALUES (11,'val1','val2',NULL,'val4')";
        $this->assertEquals($expected3, $this->formatter->buildOne(4, $data));
    }
}
